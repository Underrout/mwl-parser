#pragma once

namespace MWLParser 
{
	namespace Offsets 
	{
		namespace Header // these are relative to the start of the mwl file
		{
			constexpr size_t HEADER_START = 0;

			constexpr size_t LUNAR_MAGIC_VERSION_START = 2;
			constexpr size_t LUNAR_MAGIC_VERSION_SIZE = 2;
			constexpr size_t LUNAR_MAGIC_VERSION_END = LUNAR_MAGIC_VERSION_START + LUNAR_MAGIC_VERSION_SIZE;

			constexpr size_t DATA_POINTER_TABLE_OFFSET_START = LUNAR_MAGIC_VERSION_END;
			constexpr size_t DATA_POINTER_TABLE_OFFSET_SIZE = 4;
			constexpr size_t DATA_POINTER_TABLE_OFFSET_END = DATA_POINTER_TABLE_OFFSET_START + DATA_POINTER_TABLE_OFFSET_SIZE;

			constexpr size_t DATA_POINTER_TABLE_SIZE_START = DATA_POINTER_TABLE_OFFSET_END;  // currently unused
			constexpr size_t DATA_POINTER_TABLE_SIZE_SIZE = 4;  // currently unused
			constexpr size_t DATA_POINTER_TABLE_SIZE_END = DATA_POINTER_TABLE_SIZE_START + DATA_POINTER_TABLE_SIZE_SIZE;  // currently unused

			constexpr size_t SPECIAL_INFORMATION_START = DATA_POINTER_TABLE_SIZE_END;
			constexpr size_t SPECIAL_INFORMATION_SIZE = 4;
			constexpr size_t SPECIAL_INFORMATION_END = SPECIAL_INFORMATION_START + SPECIAL_INFORMATION_SIZE;

			constexpr size_t COMMENT_FIELD_START = SPECIAL_INFORMATION_END;
		}

		namespace DataPointers  // these are relative to the start of the data pointer table
		{
			constexpr size_t DATA_POINTER_OFFSET_SIZE = 4;
			constexpr size_t DATA_POINTER_SIZE_SIZE = 4;  // amount of bytes used to represent size of corresponding data in bytes

			constexpr size_t LEVEL_INFORMATION_OFFSET_START = 0;
			constexpr size_t LEVEL_INFORMATION_OFFSET_END = LEVEL_INFORMATION_OFFSET_START + DATA_POINTER_OFFSET_SIZE;
			constexpr size_t LEVEL_INFORMATION_SIZE_START = LEVEL_INFORMATION_OFFSET_END;
			constexpr size_t LEVEL_INFORMATION_SIZE_END = LEVEL_INFORMATION_SIZE_START + DATA_POINTER_SIZE_SIZE;

			constexpr size_t LAYER_1_DATA_OFFSET_START = LEVEL_INFORMATION_SIZE_END;
			constexpr size_t LAYER_1_DATA_OFFSET_END = LAYER_1_DATA_OFFSET_START + DATA_POINTER_OFFSET_SIZE;
			constexpr size_t LAYER_1_DATA_SIZE_START = LAYER_1_DATA_OFFSET_END;
			constexpr size_t LAYER_1_DATA_SIZE_END = LAYER_1_DATA_SIZE_START + DATA_POINTER_SIZE_SIZE;

			constexpr size_t LAYER_2_DATA_OFFSET_START = LAYER_1_DATA_SIZE_END;
			constexpr size_t LAYER_2_DATA_OFFSET_END = LAYER_2_DATA_OFFSET_START + DATA_POINTER_OFFSET_SIZE;
			constexpr size_t LAYER_2_DATA_SIZE_START = LAYER_2_DATA_OFFSET_END;
			constexpr size_t LAYER_2_DATA_SIZE_END = LAYER_2_DATA_SIZE_START + DATA_POINTER_SIZE_SIZE;

			constexpr size_t SPRITE_DATA_OFFSET_START = LAYER_2_DATA_SIZE_END;
			constexpr size_t SPRITE_DATA_OFFSET_END = SPRITE_DATA_OFFSET_START + DATA_POINTER_OFFSET_SIZE;
			constexpr size_t SPRITE_DATA_SIZE_START = SPRITE_DATA_OFFSET_END;
			constexpr size_t SPRITE_DATA_SIZE_END = SPRITE_DATA_SIZE_START + DATA_POINTER_SIZE_SIZE;

			constexpr size_t PALETTE_DATA_OFFSET_START = SPRITE_DATA_SIZE_END;
			constexpr size_t PALETTE_DATA_OFFSET_END = PALETTE_DATA_OFFSET_START + DATA_POINTER_OFFSET_SIZE;
			constexpr size_t PALETTE_DATA_SIZE_START = PALETTE_DATA_OFFSET_END;
			constexpr size_t PALETTE_DATA_SIZE_END = PALETTE_DATA_SIZE_START + DATA_POINTER_SIZE_SIZE;

			constexpr size_t SECONDARY_ENTRANCES_OFFSET_START = PALETTE_DATA_SIZE_END;
			constexpr size_t SECONDARY_ENTRANCES_OFFSET_END = SECONDARY_ENTRANCES_OFFSET_START + DATA_POINTER_OFFSET_SIZE;
			constexpr size_t SECONDARY_ENTRANCES_SIZE_START = SECONDARY_ENTRANCES_OFFSET_END;
			constexpr size_t SECONDARY_ENTRANCES_SIZE_END = SECONDARY_ENTRANCES_SIZE_START + DATA_POINTER_SIZE_SIZE;

			constexpr size_t EXANIMATION_OFFSET_START = SECONDARY_ENTRANCES_SIZE_END;
			constexpr size_t EXANIMATION_OFFSET_END = EXANIMATION_OFFSET_START + DATA_POINTER_OFFSET_SIZE;
			constexpr size_t EXANIMATION_SIZE_START = EXANIMATION_OFFSET_END;
			constexpr size_t EXANIMATION_SIZE_END = EXANIMATION_SIZE_START + DATA_POINTER_SIZE_SIZE;

			constexpr size_t BYPASS_INFORMATION_OFFSET_START = EXANIMATION_SIZE_END;
			constexpr size_t BYPASS_INFORMATION_OFFSET_END = BYPASS_INFORMATION_OFFSET_START + DATA_POINTER_OFFSET_SIZE;
			constexpr size_t BYPASS_INFORMATION_SIZE_START = BYPASS_INFORMATION_OFFSET_END;
			constexpr size_t BYPASS_INFORMATION_SIZE_END = BYPASS_INFORMATION_SIZE_START + DATA_POINTER_SIZE_SIZE;
		}
	}
}
